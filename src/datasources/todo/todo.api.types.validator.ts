/* tslint:disable */
// generated by typescript-json-validator
import Ajv from 'ajv';
import {
  SearchTodosResponse,
  CreateTodoResponse,
  GetTodoResponse,
  UpdateTodoResponse,
} from './todo.api.types';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {
  SearchTodosResponse,
  CreateTodoResponse,
  GetTodoResponse,
  UpdateTodoResponse,
};
export const Schema = {
  $id: './src/datasources/todo/todo.api.types.ts',
  $schema: 'http://json-schema.org/draft-07/schema#',
  definitions: {
    CreateTodoResponse: {
      additionalProperties: false,
      defaultProperties: [],
      properties: {
        __typename: {
          enum: ['Todo'],
          type: 'string',
        },
        id: {
          type: 'number',
        },
        isCompleted: {
          type: 'boolean',
        },
        title: {
          type: 'string',
        },
        userId: {
          type: 'number',
        },
      },
      required: ['id', 'isCompleted', 'title', 'userId'],
      type: 'object',
    },
    GetTodoResponse: {
      additionalProperties: false,
      defaultProperties: [],
      properties: {
        __typename: {
          enum: ['Todo'],
          type: 'string',
        },
        id: {
          type: 'number',
        },
        isCompleted: {
          type: 'boolean',
        },
        title: {
          type: 'string',
        },
        userId: {
          type: 'number',
        },
      },
      required: ['id', 'isCompleted', 'title', 'userId'],
      type: 'object',
    },
    SearchTodosResponse: {
      additionalProperties: false,
      defaultProperties: [],
      properties: {
        data: {
          additionalProperties: false,
          defaultProperties: [],
          properties: {
            data: {
              items: {
                additionalProperties: false,
                defaultProperties: [],
                properties: {
                  __typename: {
                    enum: ['Todo'],
                    type: 'string',
                  },
                  id: {
                    type: 'number',
                  },
                  isCompleted: {
                    type: 'boolean',
                  },
                  title: {
                    type: 'string',
                  },
                  userId: {
                    type: 'number',
                  },
                },
                required: ['id', 'isCompleted', 'title', 'userId'],
                type: 'object',
              },
              type: 'array',
            },
            page: {
              type: 'number',
            },
            pageSize: {
              type: 'number',
            },
            total: {
              type: 'number',
            },
            totalPages: {
              type: 'number',
            },
          },
          required: ['data', 'page', 'pageSize', 'total', 'totalPages'],
          type: 'object',
        },
      },
      required: ['data'],
      type: 'object',
    },
    UpdateTodoResponse: {
      additionalProperties: false,
      defaultProperties: [],
      properties: {
        __typename: {
          enum: ['Todo'],
          type: 'string',
        },
        id: {
          type: 'number',
        },
        isCompleted: {
          type: 'boolean',
        },
        title: {
          type: 'string',
        },
        userId: {
          type: 'number',
        },
      },
      required: ['id', 'isCompleted', 'title', 'userId'],
      type: 'object',
    },
  },
};
ajv.addSchema(Schema, 'Schema');
export function validate(
  typeName: 'SearchTodosResponse',
): (value: unknown) => SearchTodosResponse;
export function validate(
  typeName: 'CreateTodoResponse',
): (value: unknown) => CreateTodoResponse;
export function validate(
  typeName: 'GetTodoResponse',
): (value: unknown) => GetTodoResponse;
export function validate(
  typeName: 'UpdateTodoResponse',
): (value: unknown) => UpdateTodoResponse;
export function validate(typeName: string): (value: unknown) => any {
  const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
  return (value: unknown): any => {
    if (!validator) {
      throw new Error(
        `No validator defined for Schema#/definitions/${typeName}`,
      );
    }

    const valid = validator(value);

    if (!valid) {
      throw new Error(
        'Invalid ' +
          typeName +
          ': ' +
          ajv.errorsText(
            validator.errors!.filter((e: any) => e.keyword !== 'if'),
            { dataVar: typeName },
          ),
      );
    }

    return value as any;
  };
}
